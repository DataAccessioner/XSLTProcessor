/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.dataaccessioner.xsltprocessor;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FilenameFilter;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author sshaw6
 */
public class SwingView extends javax.swing.JFrame {

    ResourceBundle messages;
    /**
     * Creates new form SwingView
     */
    public SwingView() {
        messages = ResourceBundle.getBundle("org.dataaccessioner.xsltprocessor.resources.MessagesBundle");
        //Load any xslt found
        for(File transform: new File("xslt").listFiles(new FilenameFilter() {
            private final String[] okFileExtensions = new String[]{"xsl", "xslt"};
            
            @Override
            public boolean accept(File dir, String name) {
                for (String extension : okFileExtensions) {
                    if (name.toLowerCase().endsWith(extension)) {
                        return true;
                    }
                }
                return false;
            }
        })){
            transLstMdl.addElement(transform.getAbsolutePath());
        }
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addSrcBtn = new javax.swing.JButton();
        srcSP = new javax.swing.JScrollPane();
        srcLst = new javax.swing.JList();
        rmvSrcBtn = new javax.swing.JButton();
        outDirBtn = new javax.swing.JButton();
        outDirTxt = new javax.swing.JTextField();
        addTransBtn = new javax.swing.JButton();
        rmvTransBtn = new javax.swing.JButton();
        transSP = new javax.swing.JScrollPane();
        transLst = new javax.swing.JList();
        runBtn = new javax.swing.JButton();
        runProgress = new javax.swing.JProgressBar();
        statusSP = new javax.swing.JScrollPane();
        statusTxt = new javax.swing.JTextArea();
        cancelBtn = new javax.swing.JButton();
        srcSep = new javax.swing.JSeparator();
        transSep = new javax.swing.JSeparator();
        runSep = new javax.swing.JSeparator();
        clearStatusBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/dataaccessioner/xsltprocessor/resources/MessagesBundle"); // NOI18N
        addSrcBtn.setText(bundle.getString("add_source.btn")); // NOI18N
        addSrcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSrcBtnActionPerformed(evt);
            }
        });

        srcLst.setModel(srcLstMdl);
        srcSP.setViewportView(srcLst);

        rmvSrcBtn.setText(bundle.getString("rmv_source.btn")); // NOI18N
        rmvSrcBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvSrcBtnActionPerformed(evt);
            }
        });

        outDirBtn.setText(bundle.getString("set_out.btn")); // NOI18N
        outDirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outDirBtnActionPerformed(evt);
            }
        });

        addTransBtn.setText(bundle.getString("add_trans.btn")); // NOI18N
        addTransBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTransBtnActionPerformed(evt);
            }
        });

        rmvTransBtn.setText(bundle.getString("rmv_trans.btn")); // NOI18N
        rmvTransBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rmvTransBtnActionPerformed(evt);
            }
        });

        transLst.setModel(transLstMdl);
        transSP.setViewportView(transLst);

        runBtn.setText(bundle.getString("run_trans.btn")); // NOI18N
        runBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBtnActionPerformed(evt);
            }
        });

        statusTxt.setEditable(false);
        statusTxt.setColumns(20);
        statusTxt.setRows(5);
        statusSP.setViewportView(statusTxt);

        cancelBtn.setText(bundle.getString("cancel.btn")); // NOI18N

        clearStatusBtn.setText(bundle.getString("clear.btn")); // NOI18N
        clearStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStatusBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(runSep)
                    .addComponent(srcSep)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(runProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(runBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(outDirBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addSrcBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rmvTransBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTransBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearStatusBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rmvSrcBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(outDirTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(transSP, javax.swing.GroupLayout.DEFAULT_SIZE, 521, Short.MAX_VALUE)
                            .addComponent(srcSP)
                            .addComponent(statusSP)))
                    .addComponent(transSep, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addSrcBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rmvSrcBtn))
                    .addComponent(srcSP, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(srcSep, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addTransBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rmvTransBtn))
                    .addComponent(transSP, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transSep, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outDirBtn)
                    .addComponent(outDirTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runSep, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(runBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearStatusBtn)
                        .addGap(0, 47, Short.MAX_VALUE))
                    .addComponent(statusSP))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clearStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStatusBtnActionPerformed
        statusTxt.setText("");
    }//GEN-LAST:event_clearStatusBtnActionPerformed

    private void addSrcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSrcBtnActionPerformed
        JFileChooser addSrcSelector = new JFileChooser();
        addSrcSelector.setMultiSelectionEnabled(true);
        addSrcSelector.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (addSrcSelector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File file : addSrcSelector.getSelectedFiles()) {
                if (file.isFile() && file.canRead()) {
                    srcLstMdl.addElement(file);
                }
            }
        }
    }//GEN-LAST:event_addSrcBtnActionPerformed

    private void addTransBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTransBtnActionPerformed
        JFileChooser addSrcSelector = new JFileChooser();
        addSrcSelector.setMultiSelectionEnabled(true);
        addSrcSelector.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if (addSrcSelector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File file : addSrcSelector.getSelectedFiles()) {
                if (file.isFile() && file.canRead()) {
                    transLstMdl.addElement(file);
                }
            }
        }
    }//GEN-LAST:event_addTransBtnActionPerformed

    private void rmvSrcBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvSrcBtnActionPerformed
        for(Object selected: srcLst.getSelectedValues()){
            srcLstMdl.removeElement(selected);
        }
    }//GEN-LAST:event_rmvSrcBtnActionPerformed

    private void rmvTransBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rmvTransBtnActionPerformed
        for(Object selected: transLst.getSelectedValues()){
            transLstMdl.removeElement(selected);
        }
    }//GEN-LAST:event_rmvTransBtnActionPerformed

    private void outDirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outDirBtnActionPerformed
        JFileChooser outDirSelector = new JFileChooser();
        outDirSelector.setMultiSelectionEnabled(false);
        outDirSelector.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(outDirSelector.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File outDir = outDirSelector.getSelectedFile();
            if(outDir.isDirectory() && outDir.canWrite()){
                outDirTxt.setText(outDir.getAbsolutePath());
            } else {
                String message = MessageFormat.format(messages.getString("invalid_out.error.body0"), outDir.getPath())
                        + messages.getString("invalid_out.error.body1");
                JOptionPane.showMessageDialog(this,message,
                        messages.getString("invalid_out.error.title"),
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_outDirBtnActionPerformed

    private void runBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBtnActionPerformed
        TransformTask transform = new TransformTask();
        transform.execute();
    }//GEN-LAST:event_runBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwingView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SwingView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSrcBtn;
    private javax.swing.JButton addTransBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton clearStatusBtn;
    private javax.swing.JButton outDirBtn;
    private javax.swing.JTextField outDirTxt;
    private javax.swing.JButton rmvSrcBtn;
    private javax.swing.JButton rmvTransBtn;
    private javax.swing.JButton runBtn;
    private javax.swing.JProgressBar runProgress;
    private javax.swing.JSeparator runSep;
    private javax.swing.JList srcLst;
    private javax.swing.JScrollPane srcSP;
    private javax.swing.JSeparator srcSep;
    private javax.swing.JScrollPane statusSP;
    private javax.swing.JTextArea statusTxt;
    private javax.swing.JList transLst;
    private javax.swing.JScrollPane transSP;
    private javax.swing.JSeparator transSep;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel transLstMdl = new DefaultListModel();
    private DefaultListModel srcLstMdl = new DefaultListModel();

    class TransformTask extends SwingWorker<String, Object> {

        XSLTProcessor processor = new XSLTProcessor();
        
        @Override
        protected String doInBackground() throws Exception {
            runProgress.setMaximum(100);
            runProgress.setMinimum(0);
            runProgress.setIndeterminate(true);
            processor.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    if(evt.getPropertyName().equalsIgnoreCase("status")){
                        statusTxt.append(evt.getNewValue().toString());
                    }
                    if(evt.getPropertyName().equalsIgnoreCase("statusPercent")){
                        if(runProgress.isIndeterminate()){runProgress.setIndeterminate(false);}
                        runProgress.setValue(processor.getStatusPercent());
                    }
                }
            });
            ArrayList<String> sources = new ArrayList<String>();
            for (Object obj : srcLstMdl.toArray()) {
                sources.add(obj.toString());
            }
            ArrayList<String> transforms = new ArrayList<String>();
            for (Object obj : transLstMdl.toArray()) {
                transforms.add(obj.toString());
            }
            processor.runTransforms(sources, transforms, outDirTxt.getText());
            runProgress.setValue(0);
            
            return messages.getString("done");
        }
    }
}
